## Работа 4. Детектирование границ документов на кадрах видео
автор: Богомолов В.Ю.
дата: @time_stemp@
url: https://github.com/Gdeya/ImageProcessing/tree/main/prj.labs/lab04

### Задание
0. текст, иллюстрации и подписи отчета придумываем самостоятельно
1. самостоятельно снимаем видео смартфоном
- объект съемки - купюры (рубли разного номинала), расправленные и лежащие на поверхности (проективно искаженны прямоугольник)
- количество роликов - от 5 шт.
- длительность - 5-7 сек
- условия съемки разные
2. извлекаем по 3 кадра из каждого ролика (делим кол-во кадров на 5 и берем каждый с индеком 2/5,3/5,4/5)
3. цветоредуцируем изображения
4. бинаризцем изображения
5. морфологически обрабатываем изображения
6. выделяем основную компоненту связности
7. руками изготавливаем маски (идеальная зона купюры)
8. оцениваем качество выделение зоны и анализируем ошибки

### Результаты

![](lab4_1_2_5.png)
Рис. 1. Склейка из исходного кадра, алгоритмически сделанной маски(прямоугольник) и ручной идеальной маски(четырехугольник) из видео #1 с индексом 2_5

![](lab4_1_3_5.png)
Рис. 2. Склейка из исходного кадра, алгоритмически сделанной маски(прямоугольник) и ручной идеальной маски(четырехугольник) из видео #1 с индексом 3_5

![](lab4_1_4_5.png)
Рис. 3. Склейка из исходного кадра, алгоритмически сделанной маски(прямоугольник) и ручной идеальной маски(четырехугольник) из видео #1 с индексом 4_5

![](lab4_2_2_5.png)
Рис. 4. Склейка из исходного кадра, алгоритмически сделанной маски(прямоугольник) и ручной идеальной маски(четырехугольник) из видео #2 с индексом 2_5

![](lab4_2_3_5.png)
Рис. 5. Склейка из исходного кадра, алгоритмически сделанной маски(прямоугольник) и ручной идеальной маски(четырехугольник) из видео #2 с индексом 3_5

![](lab4_2_4_5.png)
Рис. 6. Склейка из исходного кадра, алгоритмически сделанной маски(прямоугольник) и ручной идеальной маски(четырехугольник) из видео #2 с индексом 4_5

![](lab4_3_2_5.png)
Рис. 7. Склейка из исходного кадра, алгоритмически сделанной маски(прямоугольник) и ручной идеальной маски(четырехугольник) из видео #3 с индексом 2_5

![](lab4_3_3_5.png)
Рис. 8. Склейка из исходного кадра, алгоритмически сделанной маски(прямоугольник) и ручной идеальной маски(четырехугольник) из видео #3 с индексом 3_5

![](lab4_3_4_5.png)
Рис. 9. Склейка из исходного кадра, алгоритмически сделанной маски(прямоугольник) и ручной идеальной маски(четырехугольник) из видео #3 с индексом 4_5

![](lab4_4_2_5.png)
Рис. 10. Склейка из исходного кадра, алгоритмически сделанной маски(прямоугольник) и ручной идеальной маски(четырехугольник) из видео #4 с индексом 2_5

![](lab4_4_3_5.png)
Рис. 11. Склейка из исходного кадра, алгоритмически сделанной маски(прямоугольник) и ручной идеальной маски(четырехугольник) из видео #4 с индексом 3_5

![](lab4_4_4_5.png)
Рис. 12. Склейка из исходного кадра, алгоритмически сделанной маски(прямоугольник) и ручной идеальной маски(четырехугольник) из видео #4 с индексом 4_5

![](lab4_5_2_5.png)
Рис. 13. Склейка из исходного кадра, алгоритмически сделанной маски(прямоугольник) и ручной идеальной маски(четырехугольник) из видео #5 с индексом 2_5

![](lab4_5_3_5.png)
Рис. 14. Склейка из исходного кадра, алгоритмически сделанной маски(прямоугольник) и ручной идеальной маски(четырехугольник) из видео #5 с индексом 3_5

![](lab4_5_4_5.png)
Рис. 15. Склейка из исходного кадра, алгоритмически сделанной маски(прямоугольник) и ручной идеальной маски(четырехугольник) из видео #5 с индексом 4_5

На кадрах со схожим по яркости фоном, алгоритму трудно определить правильные границы фигуры, а на явно различном фоне алгоритм справился хорошо.

Была написана функция ошибки, которая вычисляет отношение площадей пересечения масок и их площадей объединения.

Ниже приведены результаты работы функции:
#1    0.417475
#2    0.584342
#3    0.832763
#4    0.218957
#5    0.209162
#6    0.219733
#7    0.208218
#8    0.899196
#9    0.357895
#10   0.430249
#11   0.490076
#12   0.697321
#13   0.462296
#14   0.542503
#15   0.802723

БОльшие значения показывают бОльшую вероятность правильного алгоритмического выделения. Посколько алгоритм выделения обводил купюры прямоугольниками без наклона, то к значению 1 функция дойти не может. На явно не верных картинках функция показывает значение равное +-0.20 а на правильных от +-0.40 и выше. 
В ходе работы программы значения ручных масок брались из json файла со вручную размеченными точками на каждой купюре, а затем сравнивались с алгоритмической маской по вышеописанной функции. 

### Текст программы

```cpp
@cpp_source@
```
