## Работа 4. Детектирование границ документов на кадрах видео
автор: Богомолов В.Ю.
дата: @time_stemp@
url: https://github.com/Gdeya/ImageProcessing/tree/main/prj.labs/lab04

### Задание
0. текст, иллюстрации и подписи отчета придумываем самостоятельно
1. самостоятельно снимаем видео смартфоном
- объект съемки - купюры (рубли разного номинала), расправленные и лежащие на поверхности (проективно искаженны прямоугольник)
- количество роликов - от 5 шт.
- длительность - 5-7 сек
- условия съемки разные
2. извлекаем по 3 кадра из каждого ролика (делим кол-во кадров на 5 и берем каждый с индеком 2/5,3/5,4/5)
3. цветоредуцируем изображения
4. бинаризцем изображения
5. морфологически обрабатываем изображения
6. выделяем основную компоненту связности
7. руками изготавливаем маски (идеальная зона купюры)
8. оцениваем качество выделение зоны и анализируем ошибки

Описание алгоритма:

Первым этапом я цветоредуцировал видео до Grayscale, а затем бинаризовал через простую бинаризацию с порогом 170 (этот параметр оказался самым оптимальным после ряда экспериментов).

Затенм был поиск оптимальной морфологии для моих кадров. Лучше всего себя показал open, close со структурным элементом квадрат 5x5 пикселей с последующей дилатацией + эрозией с квадратом 100x100 пикселей.

Следующим было поиск набольшей компоненты связности и "вырезания" ее из исходной картинки. Результатом была алгоритмически найденная маска купюры.

Заранее в графическом редакторе я искал координаты купюры для создания json файла с точками для идеальной маски. Эти точки импортировались в программу и через fillPolly создавалась ручная идеальная маска купюры.

Последним этапом проводилось сравнение двух созданных масок по формуле: Площадь пересечения разделить на площадь объединения. Следовательно, чем ближе значение функции к 1, тем выше шанс того, что алгоритм сработал верно.

### Результаты и анализ
Фон на данном картинке сильно отличим от купюры, но на каждом кадре есть засвет в определенных областях, с которым алгоритм справился не до конца. В результате получилась маска купюры вместе с небольшим засветом.
![](lab4_1.png)
Рис. 1. Склейка из исходного кадра, алгоритмически сделанной маски(прямоугольник) и ручной идеальной маски(четырехугольник) из видео #1

На данном видео был выбран сложный и яркий фон. Здесь выбранный алгоритм не справился. Скорее всего алгоритм, выбирающий пиксели темнее фона тоже бы не справился, так как на фоне присутствуют зоны с более низкой яркостью.
![](lab4_2.png)
Рис. 2. Склейка из исходного кадра, алгоритмически сделанной маски(прямоугольник) и ручной идеальной маски(четырехугольник) из видео #2

Здесь левая часть изображения явно темнее правой, но вероятнее всего алгоритм отработал бы хорошо, если мы бы при бинаризации взяли порог ниже, но из-за этого намного хуже обрабатываются другие видео.
![](lab4_3.png)
Рис. 3. Склейка из исходного кадра, алгоритмически сделанной маски(прямоугольник) и ручной идеальной маски(четырехугольник) из видео #3

Алгоритм справился почти идеально. Остались небольшие структурные элементы по углам из-за морфологии.
![](lab4_4.png)
Рис. 4. Склейка из исходного кадра, алгоритмически сделанной маски(прямоугольник) и ручной идеальной маски(четырехугольник) из видео #4

Тут алгоритм тоже справился вполне достойно, особенно на последнем кадре.
![](lab4_5.png)
Рис. 5. Склейка из исходного кадра, алгоритмически сделанной маски(прямоугольник) и ручной идеальной маски(четырехугольник) из видео #5

Ниже приведены результаты работы функции:
#1    0.652427
#2    0.875204
#3    0.889897
#4    0.237258
#5    0.246524
#6    0.250211
#7    0.329032
#8    0.413952
#9    0.22474
#10   0.941486
#11   0.940483
#12   0.930686
#13   0.824737
#14   0.93514
#15   0.971943 

Как мы видим алгоритм показывает значения близкие к единице на видео с хорошими условиями, а также очень низкие значения в видео с плохим фоном.

### Текст программы

```cpp
@cpp_source@
```
